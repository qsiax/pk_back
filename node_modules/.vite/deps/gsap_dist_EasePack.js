import {
  __commonJS
} from "./chunk-25V3TAZK.js";

// node_modules/gsap/dist/EasePack.js
var require_EasePack = __commonJS({
  "node_modules/gsap/dist/EasePack.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global = global || self, factory(global.window = global.window || {}));
    })(exports, function(exports2) {
      "use strict";
      var gsap, _registerEase, _getGSAP = function _getGSAP2() {
        return gsap || typeof window !== "undefined" && (gsap = window.gsap) && gsap.registerPlugin && gsap;
      }, _boolean = function _boolean2(value, defaultValue) {
        return !!(typeof value === "undefined" ? defaultValue : value && !~(value + "").indexOf("false"));
      }, _initCore = function _initCore2(core) {
        gsap = core || _getGSAP();
        if (gsap) {
          _registerEase = gsap.registerEase;
          var eases = gsap.parseEase(), createConfig = function createConfig2(ease) {
            return function(ratio) {
              var y = 0.5 + ratio / 2;
              ease.config = function(p3) {
                return ease(2 * (1 - p3) * p3 * y + p3 * p3);
              };
            };
          }, p2;
          for (p2 in eases) {
            if (!eases[p2].config) {
              createConfig(eases[p2]);
            }
          }
          _registerEase("slow", SlowMo);
          _registerEase("expoScale", ExpoScaleEase);
          _registerEase("rough", RoughEase);
          for (p2 in EasePack) {
            p2 !== "version" && gsap.core.globals(p2, EasePack[p2]);
          }
        }
      }, _createSlowMo = function _createSlowMo2(linearRatio, power, yoyoMode) {
        linearRatio = Math.min(1, linearRatio || 0.7);
        var pow = linearRatio < 1 ? power || power === 0 ? power : 0.7 : 0, p1 = (1 - linearRatio) / 2, p3 = p1 + linearRatio, calcEnd = _boolean(yoyoMode);
        return function(p2) {
          var r = p2 + (0.5 - p2) * pow;
          return p2 < p1 ? calcEnd ? 1 - (p2 = 1 - p2 / p1) * p2 : r - (p2 = 1 - p2 / p1) * p2 * p2 * p2 * r : p2 > p3 ? calcEnd ? p2 === 1 ? 0 : 1 - (p2 = (p2 - p3) / p1) * p2 : r + (p2 - r) * (p2 = (p2 - p3) / p1) * p2 * p2 * p2 : calcEnd ? 1 : r;
        };
      }, _createExpoScale = function _createExpoScale2(start, end, ease) {
        var p1 = Math.log(end / start), p2 = end - start;
        ease && (ease = gsap.parseEase(ease));
        return function(p3) {
          return (start * Math.exp(p1 * (ease ? ease(p3) : p3)) - start) / p2;
        };
      }, EasePoint = function EasePoint2(time, value, next) {
        this.t = time;
        this.v = value;
        if (next) {
          this.next = next;
          next.prev = this;
          this.c = next.v - value;
          this.gap = next.t - time;
        }
      }, _createRoughEase = function _createRoughEase2(vars) {
        if (typeof vars !== "object") {
          vars = {
            points: +vars || 20
          };
        }
        var taper = vars.taper || "none", a = [], cnt = 0, points = (+vars.points || 20) | 0, i = points, randomize = _boolean(vars.randomize, true), clamp = _boolean(vars.clamp), template = gsap ? gsap.parseEase(vars.template) : 0, strength = (+vars.strength || 1) * 0.4, x, y, bump, invX, obj, pnt, recent;
        while (--i > -1) {
          x = randomize ? Math.random() : 1 / points * i;
          y = template ? template(x) : x;
          if (taper === "none") {
            bump = strength;
          } else if (taper === "out") {
            invX = 1 - x;
            bump = invX * invX * strength;
          } else if (taper === "in") {
            bump = x * x * strength;
          } else if (x < 0.5) {
            invX = x * 2;
            bump = invX * invX * 0.5 * strength;
          } else {
            invX = (1 - x) * 2;
            bump = invX * invX * 0.5 * strength;
          }
          if (randomize) {
            y += Math.random() * bump - bump * 0.5;
          } else if (i % 2) {
            y += bump * 0.5;
          } else {
            y -= bump * 0.5;
          }
          if (clamp) {
            if (y > 1) {
              y = 1;
            } else if (y < 0) {
              y = 0;
            }
          }
          a[cnt++] = {
            x,
            y
          };
        }
        a.sort(function(a2, b) {
          return a2.x - b.x;
        });
        pnt = new EasePoint(1, 1, null);
        i = points;
        while (i--) {
          obj = a[i];
          pnt = new EasePoint(obj.x, obj.y, pnt);
        }
        recent = new EasePoint(0, 0, pnt.t ? pnt : pnt.next);
        return function(p2) {
          var pnt2 = recent;
          if (p2 > pnt2.t) {
            while (pnt2.next && p2 >= pnt2.t) {
              pnt2 = pnt2.next;
            }
            pnt2 = pnt2.prev;
          } else {
            while (pnt2.prev && p2 <= pnt2.t) {
              pnt2 = pnt2.prev;
            }
          }
          recent = pnt2;
          return pnt2.v + (p2 - pnt2.t) / pnt2.gap * pnt2.c;
        };
      };
      var SlowMo = _createSlowMo(0.7);
      SlowMo.ease = SlowMo;
      SlowMo.config = _createSlowMo;
      var ExpoScaleEase = _createExpoScale(1, 2);
      ExpoScaleEase.config = _createExpoScale;
      var RoughEase = _createRoughEase();
      RoughEase.ease = RoughEase;
      RoughEase.config = _createRoughEase;
      var EasePack = {
        SlowMo,
        RoughEase,
        ExpoScaleEase
      };
      for (var p in EasePack) {
        EasePack[p].register = _initCore;
        EasePack[p].version = "3.12.5";
      }
      _getGSAP() && gsap.registerPlugin(SlowMo);
      exports2.EasePack = EasePack;
      exports2.ExpoScaleEase = ExpoScaleEase;
      exports2.RoughEase = RoughEase;
      exports2.SlowMo = SlowMo;
      exports2.default = EasePack;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});
export default require_EasePack();
/*! Bundled license information:

gsap/dist/EasePack.js:
  (*!
   * EasePack 3.12.5
   * https://gsap.com
   *
   * @license Copyright 2008-2024, GreenSock. All rights reserved.
   * Subject to the terms at https://gsap.com/standard-license or for
   * Club GSAP members, the agreement issued with that membership.
   * @author: Jack Doyle, jack@greensock.com
  *)
*/
//# sourceMappingURL=gsap_dist_EasePack.js.map
